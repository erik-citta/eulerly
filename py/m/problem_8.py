#!/usr/bin/env python
# -*- coding: utf-8 -*-

N = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
#   ^  ^         ^   ^

# unfinished...
def largest_product_in_adj_win(n=N, win_len=4):
    digits = map(int, list(str(n)))
    digit_count = len(digits)
    
    # product of the first window.
    prod = reduce(lambda a, b: a * b, digits[0:win_len])
    max_prod = prod
     
    exiting = digits[0]
    i = 1
    while i < digit_count - win_len:
        entering = digits[i + win_len - 1]

        if entering == 0:
            # WTF?!?!?!?!
            pass
        else:
            prod = prod * last_in / exiting

        if last_in > last_out:
            max_prod = max_prod if max_prod >= prod else prod

        exiting = digits[i]
        i += 1

    return max_prod


def naive(n=N, win_len=13):
    digits = map(int, list(str(n)))
    digit_count = len(digits)

    max_prod = 0
    for x in xrange(digit_count):
        prod = reduce(lambda x, y: x * y, digits[x : x + win_len])
        max_prod = max_prod if max_prod >= prod else prod
    return max_prod

race = {
    'problemName': '8',
    'author': 'marco',
    'raceables': { 
        'naive': naive
    }  
}

if __name__ == "__main__":
    print solve()